#apt install -y lrzsz unzip  net-tools  iputils-ping  ufw   policycoreutils jq  cron  ntpdate bash-completion  dnsutils
kubeadm部署集群的方式可以查看官方文档，有很详细的说明
------
# 删除软件及其配置文件
apt-get --purge remove <package>
# 删除没用的依赖包
apt-get autoremove <package>
# 此时dpkg的列表中有“rc”状态的软件包，可以执行如下命令做最后清理：
dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P
----
#初始化仓库
cd existing_repo
git remote add origin git@gitlab.xxxxxxxxxx.com:fluxcd/serverall.git 
git branch -M main
git push -uf origin main
---
#base64 file
base64 -w  0  config.json
#查看systemd管理的服务日志 /usr/lib/systemd/system/nginx.service
journalctl --since "2024-03-12 18:00:00"
---------
#helm模板语法
{{ if or (eq .Values.myString "") (eq .Values.myString " ") }}
    # 字符串为空或只包含空格时执行的操作
{{ end }}
-----------
使用if语句来检查每个命令的退出状态：
```
#!/bin/bash

if command1; then
    if command2; then
        echo "Both commands executed successfully."
    else
        echo "Command2 failed."
    fi
else
    echo "Command1 failed."
fi
```
#awk的使用
awk       '/10003/ {sub(/enabled: true/, "enabled: false", $0); print }'  values.yaml
#sed的使用
sed -i '/apple/ { /banana/ s/.*/fruit salad/ }' example.txt
-i选项表示直接修改文件内容，/apple/和/banana/是两个条件，{}中的内容表示同时满足这两个条件时执行的操作，s/.*/fruit salad/表示将匹配到的行替换为fruit salad。
#curl   Post
curl -X POST -H "Content-Type: application/json" -d '{
    "auth": {
        "identity": {
            "methods": [
                "password"
            ],
            "password": {
                "user": {
                    "domain": {
                        "name": "IAMDomain"
                    },
                    "name": "IAMUser",
                    "password": "IAMPassword"
                }
            }
        },
        "scope": {
            "domain": {
                "name": "IAMDomain"
            }
        }
    }
}' -H "Custom-Header: value" http://example.com/api/endpoint
#生成 SSH Key
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
#连接redis
ssh $remote_server_user@$remote_server_ip "redis-cli -h $redis_server_ip -p $redis_server_port set $key_name $value"


#k8s
kubectl get crd | grep victoriametrics.com | awk '{print $1 }' | xargs -i  kubectl  patch  crd  {} -p '{"metadata":{"finalizers":null}}'
#删除当前目录下的所有内容，但是排除docs
find . -mindepth 1 -not -path "./docs" -delete
##
root@master01:~/v1.30/12-tekton/clone-build-helm# kubectl get secrets  vault-auth-secret  -o json    |jq .data'."ca.crt"'   -r    |base64    -d
##
docker run -d  --name minio  -p 9000:9000 -p 9001:9001  -v /root/minio:/data   -e "MINIO_ACCESS_KEY=minio" -e "MINIO_SECRET_KEY=basic@123"  quay.io/minio/minio server /data --console-address ":9001"
## 打包
tar -zcvf proj.tar.gz --exclude='/root/proj/roh5/mysql-5.7/data' --exclude='/root/proj/roh5/redis-6.0/data' /root/proj/
##安装mysql5.7
docker run  -d  --name mysql  --restart=always -p 3306:3306  -v $PWD/data:/mysql_data -e MYSQL_ROOT_PASSWORD=basic123   bitnami/mysql:5.7.43
## 子网划分
192.168.1.0/24 可划分为
借用 2 位: /26 (255.255.255.192)
子网 1: 192.168.1.0/26 (可用 IP 范围: 192.168.1.1 - 192.168.1.62)
子网 2: 192.168.1.64/26 (可用 IP 范围: 192.168.1.65 - 192.168.1.126)
子网 3: 192.168.1.128/26 (可用 IP 范围: 192.168.1.129 - 192.168.1.190)
子网 4: 192.168.1.192/26 (可用 IP 范围: 192.168.1.193 - 192.168.1.254)
##MYSQL
mysql -h 10.1.196.73 -u root -pXXXXXXXXX db_ro3_server -e "SELECT GROUP_CONCAT(id SEPARATOR ' ') AS ids FROM T_SERVER;"
mysql -h 10.1.196.73 -u root -pXXXXXXXXX db_ro3_server -s -N -e "SELECT GROUP_CONCAT(id SEPARATOR ' ') FROM T_SERVER;"  |grep -v 
##mysql语句


SELECT
    tli.uid,
    tli.server_id,
    tli.regist_time,
    tli.last_login_time,
    tor.platform_amount,
    tor.delivery_time,
    tor.ip
FROM
    T_LOGIN_INFO AS tli
LEFT JOIN
    T_ORDER AS tor ON tli.uid = tor.uid
ORDER BY
    tli.last_login_time;
	
	
SELECT uid, server_id, regist_time, last_login_time
FROM T_LOGIN_INFO
ORDER BY last_login_time;


SELECT
    li.uid,
    li.server_id,
    li.regist_time,
    li.last_login_time,
    CASE 
        WHEN EXISTS (SELECT 1 FROM T_ORDER AS o WHERE o.uid = li.uid AND o.status = 2) THEN '是'
        ELSE '否'
    END AS 是否充值
FROM
    T_LOGIN_INFO AS li;
##
SELECT
    li.uid,
    li.server_id,
    li.regist_time,
    li.last_login_time,
    CASE WHEN EXISTS (SELECT 1 FROM T_ORDER o WHERE o.uid = li.uid AND o.status = 2) THEN '是' ELSE '否' END AS 是否充值,
    (SELECT MIN(delivery_time) FROM T_ORDER o WHERE o.uid = li.uid AND o.status = 2) AS 首充时间
FROM
    T_LOGIN_INFO li;
